{
    "sourceFile": "src/utils/routes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1653968722182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1655430558956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n                 // const path =\n                 //   index > 0 ? route.component.slice(index) : `views/${route.component}`\n                 // route.component = (resolve) => require([`@/${path}`], resolve)\n                 route.component = loadView(route.component)\n+                c\n             }\n         }\n         if (route.children && route.children.length)\n             route.children = convertRouter(route.children)\n"
                },
                {
                    "date": 1655430566663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n                 // const path =\n                 //   index > 0 ? route.component.slice(index) : `views/${route.component}`\n                 // route.component = (resolve) => require([`@/${path}`], resolve)\n                 route.component = loadView(route.component)\n-                c\n+                console\n             }\n         }\n         if (route.children && route.children.length)\n             route.children = convertRouter(route.children)\n"
                },
                {
                    "date": 1655430572225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n                 // const path =\n                 //   index > 0 ? route.component.slice(index) : `views/${route.component}`\n                 // route.component = (resolve) => require([`@/${path}`], resolve)\n                 route.component = loadView(route.component)\n-                console\n+                console.log(\"\")\n             }\n         }\n         if (route.children && route.children.length)\n             route.children = convertRouter(route.children)\n"
                },
                {
                    "date": 1655430578534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n                 // const path =\n                 //   index > 0 ? route.component.slice(index) : `views/${route.component}`\n                 // route.component = (resolve) => require([`@/${path}`], resolve)\n                 route.component = loadView(route.component)\n-                console.log(\"component\")\n+                console.log(\"component\",)\n             }\n         }\n         if (route.children && route.children.length)\n             route.children = convertRouter(route.children)\n"
                }
            ],
            "date": 1653968722182,
            "name": "Commit-0",
            "content": "import {resolve} from 'path'\nimport Layout from '@/vab/layouts'\n\nimport {isExternal} from '@/utils/validate'\nimport {recordRoute} from '@/config'\nimport qs from 'qs'\n\n/**\n * @description all模式渲染后端返回路由,支持包含views路径的所有页面\n * @param asyncRoutes\n * @returns {*}\n */\nexport function convertRouter(asyncRoutes) {\n    return asyncRoutes.map((route) => {\n        if (route.component) {\n            if (route.component === 'Layout') {\n                console.log(\"11111\")\n                route.component = Layout\n            } else {\n                // const index = route.component.indexOf('views')\n                // const path =\n                //   index > 0 ? route.component.slice(index) : `views/${route.component}`\n                // route.component = (resolve) => require([`@/${path}`], resolve)\n                route.component = loadView(route.component)\n            }\n        }\n        if (route.children && route.children.length)\n            route.children = convertRouter(route.children)\n        if (route.children && route.children.length === 0) delete route.children\n        return route\n    })\n}\n\nexport const loadView = (view) => {\n    \n    return (resolve) => require([`@/views/${view}`], resolve)\n}\n\n/**\n * @description 根据roles数组拦截路由\n * @param routes 路由\n * @param rolesControl 是否进行权限控制\n * @param baseUrl 基础路由\n * @returns {[]}\n */\nexport function filterRoutes(routes, rolesControl, baseUrl = '/') {\n    return routes\n        .map((route) => {\n            route = {...route}\n            route.path =\n                route.path !== '*' && !isExternal(route.path)\n                    ? resolve(baseUrl, route.path)\n                    : route.path\n            if (route.children && route.children.length > 0) {\n                route.children = filterRoutes(route.children, rolesControl, route.path)\n                if (route.children.length > 0) {\n                    route.childrenNameList = route.children.flatMap(\n                        (_) => _.childrenNameList\n                    )\n                    if (!route.redirect)\n                        route.redirect = route.children[0].redirect\n                            ? route.children[0].redirect\n                            : route.children[0].path\n                }\n            } else route.childrenNameList = [route.name]\n            console.log(\"route=====\", route)\n            return route\n        })\n}\n\n/**\n * 根据path路径获取matched\n * @param routes 菜单routes\n * @param name 路由名\n * @returns {*} matched\n */\nexport function handleMatched(routes, name) {\n    return routes\n        .filter((route) => route.childrenNameList.indexOf(name) + 1)\n        .flatMap((route) =>\n            route.children ? [route, ...handleMatched(route.children, name)] : [route]\n        )\n}\n\n/**\n * 生成单个多标签元素，可用于同步/异步添加多标签\n * @param tag route页信息\n */\nexport function handleTabs(tag) {\n    let parentIcon = null\n    if (tag.matched)\n        for (let i = tag.matched.length - 2; i >= 0; i--)\n            if (!parentIcon && tag.matched[i].meta.icon)\n                parentIcon = tag.matched[i].meta.icon\n    if (!parentIcon) parentIcon = 'menu-line'\n    const path = handleActivePath(tag, true)\n    if (tag.name && tag.meta && tag.meta.tabHidden !== true) {\n        return {\n            path: path,\n            query: tag.query,\n            params: tag.params,\n            name: tag.name,\n            parentIcon,\n            meta: {...tag.meta},\n        }\n    }\n}\n\n/**\n * 根据当前route获取激活菜单\n * @param route 当前路由\n * @param isTab 是否是标签\n * @returns {string|*}\n */\nexport function handleActivePath(route, isTab = false) {\n    const {meta, path} = route\n    const rawPath = route.matched\n        ? route.matched[route.matched.length - 1].path\n        : path\n    const fullPath =\n        route.query && Object.keys(route.query).length\n            ? `${route.path}?${qs.stringify(route.query)}`\n            : route.path\n    if (isTab) return meta.dynamicNewTab ? fullPath : rawPath\n    if (meta.activeMenu) return meta.activeMenu\n    return fullPath\n}\n\n/**\n * 获取当前跳转登录页的Route\n * @param currentPath 当前页面地址\n */\nexport function toLoginRoute(currentPath) {\n    if (recordRoute && currentPath !== '/')\n        return {\n            path: '/login',\n            query: {redirect: currentPath},\n            replace: true,\n        }\n    else return {path: '/login', replace: true}\n}\n"
        }
    ]
}