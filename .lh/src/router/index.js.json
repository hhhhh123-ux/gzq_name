{
    "sourceFile": "src/router/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1654839699410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1654839706987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         },\r\n         {\r\n             path: \"/Home\",\r\n             name: \"Home\",\r\n-            component: () => import(\"@/vi\"),\r\n+            component: () => import(\"@/vab/\"),\r\n             meta: {\r\n                 hidden: true,\r\n             },\r\n             children: []\r\n"
                },
                {
                    "date": 1654840255235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         },\r\n         {\r\n             path: \"/Home\",\r\n             name: \"Home\",\r\n-            component: () => import(\"@/vab/\"),\r\n+            component: () => import(\"@/vab/layouts/index\"),\r\n             meta: {\r\n                 hidden: true,\r\n             },\r\n             children: []\r\n@@ -189,9 +189,8 @@\n     })\r\n }\r\n \r\n function createRouter(routes = constantRoutes) {\r\n-    console.log(\"routes======\",routes)\r\n     const router123=new VueRouter({\r\n         base: publicPath,\r\n         mode: routerMode,\r\n         scrollBehavior: () => ({\r\n"
                },
                {
                    "date": 1654840261793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,59 @@\n import Vue from \"vue\";\r\n import VueRouter from \"vue-router\";\r\n-import {loginInterception, recordRoute, routerMode} from '@/config/setting.config';\r\n-import store from '@/store'\r\n-import {Message} from 'element-ui'\r\n-import 'nprogress/nprogress.css'\r\n-import {publicPath} from \"../config/cli.config\";\r\n-export const asyncRoutes = []\r\n+import {\r\n+  loginInterception,\r\n+  recordRoute,\r\n+  routerMode,\r\n+} from \"@/config/setting.config\";\r\n+import store from \"@/store\";\r\n+import { Message } from \"element-ui\";\r\n+import \"nprogress/nprogress.css\";\r\n+import { publicPath } from \"../config/cli.config\";\r\n+export const asyncRoutes = [];\r\n Vue.use(VueRouter);\r\n \r\n export const constantRoutes = [\r\n-        {\r\n-            path: \"/\",\r\n-            name: \"Login\",\r\n-            redirect: \"/Login\",\r\n-        },\r\n-        {\r\n-            path: \"/Home\",\r\n-            name: \"Home\",\r\n-            component: () => import(\"@/vab/layouts/index\"),\r\n-            meta: {\r\n-                hidden: true,\r\n-            },\r\n-            children: []\r\n-        },\r\n-        {\r\n-            path: \"/Login\",\r\n-            name: \"login\",\r\n-            meta: {\r\n-                hidden: true,\r\n-            },\r\n-            component: () => import(\"@/views/Login/Login\"),\r\n-        },\r\n-        {\r\n-            path: '/403',\r\n-            name: '403',\r\n-            component: () => import('@/views/403'),\r\n+  {\r\n+    path: \"/\",\r\n+    name: \"Login\",\r\n+    redirect: \"/Login\",\r\n+  },\r\n+  {\r\n+    path: \"/Home\",\r\n+    name: \"Home\",\r\n+    component: () => import(\"@/vab/layouts/index\"),\r\n+    meta: {\r\n+      hidden: true,\r\n+    },\r\n+    children: [],\r\n+  },\r\n+  {\r\n+    path: \"/Login\",\r\n+    name: \"login\",\r\n+    meta: {\r\n+      hidden: true,\r\n+    },\r\n+    component: () => import(\"@/views/Login/Login\"),\r\n+  },\r\n+  {\r\n+    path: \"/403\",\r\n+    name: \"403\",\r\n+    component: () => import(\"@/views/403\"),\r\n \r\n-            meta: {\r\n-                hidden: true,\r\n-            },\r\n-        },\r\n-        {\r\n-            path: '/404',\r\n-            name: '404',\r\n-            component: () => import('@/views/404'),\r\n-            meta: {\r\n-                hidden: true,\r\n-            },\r\n-        },\r\n-]\r\n+    meta: {\r\n+      hidden: true,\r\n+    },\r\n+  },\r\n+  {\r\n+    path: \"/404\",\r\n+    name: \"404\",\r\n+    component: () => import(\"@/views/404\"),\r\n+    meta: {\r\n+      hidden: true,\r\n+    },\r\n+  },\r\n+];\r\n \r\n //  const router = new VueRouter({\r\n //     routes: [\r\n //         {\r\n@@ -82,127 +86,132 @@\n // });\r\n \r\n const router = createRouter();\r\n \r\n-const whiteList = ['/Login'] // no redirect whitelist\r\n+const whiteList = [\"/Login\"]; // no redirect whitelist\r\n //导航守卫\r\n //使用 router.beforeEach 注册一个全局前置守卫，判断用户是否登陆\r\n router.beforeEach(async (to, from, next) => {\r\n-    // start progress bar\r\n+  // start progress bar\r\n \r\n-    const hasToken = localStorage.getItem(\"token\")\r\n-    if (hasToken) {\r\n-        if (store.getters['routes/routes'].length) {\r\n-            if (to.path === '/Login') {\r\n-                // if is logged in, redirect to the home page\r\n-                next({path: '/Home'})\r\n-                // NProgress.done()\r\n-            } else {\r\n-                console.log(\"to.path\", to.path)\r\n-                console.log(\"accessRoutes111111\", await store.dispatch('routes/setRoutes', 'all'))\r\n-                next();\r\n-            }\r\n-        } else {\r\n-            //判断获取来的动态路由的数据是否有数据\r\n-            const hasGetUserInfo = store.getters.roles && store.getters.roles.length > 0\r\n-            if (hasGetUserInfo) {\r\n-                next()\r\n-            } else {\r\n-                try {\r\n-                    // get user info\r\n-                    // await store.dispatch('user/getInfo')\r\n-                    //调用获取动态的接口\r\n-                    // eslint-disable-next-line no-undef\r\n-                    if (loginInterception) {\r\n-                        console.log(\"data==\",await store.dispatch('user/getUserInfo'))\r\n-                        // eslint-disable-next-line no-empty\r\n-                    }else{\r\n-\r\n-                    }\r\n-                    // 在这里获取异步路由\r\n-                    // eslint-disable-next-line no-undef\r\n-                    console.log(\"accessRoutes\", await store.dispatch('routes/setRoutes', 'all'))\r\n-                    // 调用router.addRoutes方法,将异步路由添加进去\r\n-                     //const {data} =await store.dispatch('routes/setRoutes', 'all')\r\n-                     // router.addRoutes(data)\r\n-                    // // 在这动态添加最后的通配路由，确保先有动态路由、再有通配路由，解决动态路由刷新会跳转到404问题\r\n-                    // let lastRou = [{ path: '*', redirect: '/404' }]\r\n-                    //router.addRoutes(lastRou)\r\n-                    next()\r\n-                } catch (error) {\r\n-                    // remove token and go to login page to re-login\r\n-                    await store.dispatch('user/resetAll')\r\n-                    Message.error(error || 'Has Error')\r\n-                    next(toLoginRoute(to.path))\r\n-                }\r\n-            }\r\n-        }\r\n+  const hasToken = localStorage.getItem(\"token\");\r\n+  if (hasToken) {\r\n+    if (store.getters[\"routes/routes\"].length) {\r\n+      if (to.path === \"/Login\") {\r\n+        // if is logged in, redirect to the home page\r\n+        next({ path: \"/Home\" });\r\n+        // NProgress.done()\r\n+      } else {\r\n+        console.log(\"to.path\", to.path);\r\n+        console.log(\r\n+          \"accessRoutes111111\",\r\n+          await store.dispatch(\"routes/setRoutes\", \"all\")\r\n+        );\r\n+        next();\r\n+      }\r\n     } else {\r\n-        /* has no token*/\r\n-        if (whiteList.indexOf(to.path) !== -1) {\r\n-            // in the free login whitelist, go directly\r\n-            next()\r\n-        } else {\r\n-            // other pages that do not have permission to access are redirected to the login page.\r\n-            console.log(\"/login?redirect=\", to.path)\r\n-            next({path: '/Login'})\r\n+      //判断获取来的动态路由的数据是否有数据\r\n+      const hasGetUserInfo =\r\n+        store.getters.roles && store.getters.roles.length > 0;\r\n+      if (hasGetUserInfo) {\r\n+        next();\r\n+      } else {\r\n+        try {\r\n+          // get user info\r\n+          // await store.dispatch('user/getInfo')\r\n+          //调用获取动态的接口\r\n+          // eslint-disable-next-line no-undef\r\n+          if (loginInterception) {\r\n+            console.log(\"data==\", await store.dispatch(\"user/getUserInfo\"));\r\n+            // eslint-disable-next-line no-empty\r\n+          } else {\r\n+          }\r\n+          // 在这里获取异步路由\r\n+          // eslint-disable-next-line no-undef\r\n+          console.log(\r\n+            \"accessRoutes\",\r\n+            await store.dispatch(\"routes/setRoutes\", \"all\")\r\n+          );\r\n+          // 调用router.addRoutes方法,将异步路由添加进去\r\n+          //const {data} =await store.dispatch('routes/setRoutes', 'all')\r\n+          // router.addRoutes(data)\r\n+          // // 在这动态添加最后的通配路由，确保先有动态路由、再有通配路由，解决动态路由刷新会跳转到404问题\r\n+          // let lastRou = [{ path: '*', redirect: '/404' }]\r\n+          //router.addRoutes(lastRou)\r\n+          next();\r\n+        } catch (error) {\r\n+          // remove token and go to login page to re-login\r\n+          await store.dispatch(\"user/resetAll\");\r\n+          Message.error(error || \"Has Error\");\r\n+          next(toLoginRoute(to.path));\r\n         }\r\n+      }\r\n     }\r\n-    //\r\n-    // if (to.path === '/login') {\r\n-    //     next();\r\n-    // } else {\r\n-    //     let token = localStorage.getItem('token');\r\n-    //     if (token === null || token === '') {\r\n-    //         next('/login');\r\n\\ No newline at end of file\n-    //     } else {\r\n-    //         next();\r\n-    //     }\r\n-    // }\r\n+  } else {\r\n+    /* has no token*/\r\n+    if (whiteList.indexOf(to.path) !== -1) {\r\n+      // in the free login whitelist, go directly\r\n+      next();\r\n+    } else {\r\n+      // other pages that do not have permission to access are redirected to the login page.\r\n+      console.log(\"/login?redirect=\", to.path);\r\n+      next({ path: \"/Login\" });\r\n+    }\r\n+  }\r\n+  //\r\n+  // if (to.path === '/login') {\r\n+  //     next();\r\n+  // } else {\r\n+  //     let token = localStorage.getItem('token');\r\n+  //     if (token === null || token === '') {\r\n+  //         next('/login');\r\n+  //     } else {\r\n+  //         next();\r\n+  //     }\r\n+  // }\r\n });\r\n \r\n /**\r\n  * 获取当前跳转登录页的Route\r\n  * @param currentPath 当前页面地址\r\n  */\r\n export function toLoginRoute(currentPath) {\r\n-    if (recordRoute && currentPath !== '/')\r\n-        return {\r\n-            path: '/login',\r\n-            query: {redirect: currentPath},\r\n-            replace: true,\r\n-        }\r\n-    else return {path: '/login', replace: true}\r\n+  if (recordRoute && currentPath !== \"/\")\r\n+    return {\r\n+      path: \"/login\",\r\n+      query: { redirect: currentPath },\r\n+      replace: true,\r\n+    };\r\n+  else return { path: \"/login\", replace: true };\r\n }\r\n \r\n export function resetRouter(routes = constantRoutes) {\r\n-    routes.map((route) => {\r\n-        if (route.children) {\r\n-            route.children = fatteningRoutes(route.children)\r\n-        }\r\n-    })\r\n-    router.matcher = createRouter(routes).matcher\r\n+  routes.map((route) => {\r\n+    if (route.children) {\r\n+      route.children = fatteningRoutes(route.children);\r\n+    }\r\n+  });\r\n+  router.matcher = createRouter(routes).matcher;\r\n }\r\n \r\n function fatteningRoutes(routes) {\r\n-    return routes.flatMap((route) => {\r\n-        return route.children ? fatteningRoutes(route.children) : route\r\n-    })\r\n+  return routes.flatMap((route) => {\r\n+    return route.children ? fatteningRoutes(route.children) : route;\r\n+  });\r\n }\r\n \r\n function createRouter(routes = constantRoutes) {\r\n-    const router123=new VueRouter({\r\n-        base: publicPath,\r\n-        mode: routerMode,\r\n-        scrollBehavior: () => ({\r\n-            y: 0,\r\n-        }),\r\n-        routes: routes\r\n-    })\r\n-    console.log(\"routes123======\",router123)\r\n-    return router123\r\n+  const router123 = new VueRouter({\r\n+    base: publicPath,\r\n+    mode: routerMode,\r\n+    scrollBehavior: () => ({\r\n+      y: 0,\r\n+    }),\r\n+    routes: routes,\r\n+  });\r\n+  return router123;\r\n }\r\n-const originalPush = VueRouter.prototype.push\r\n+const originalPush = VueRouter.prototype.push;\r\n VueRouter.prototype.push = function push(location) {\r\n-    return originalPush.call(this, location).catch((err) => err)\r\n-}\r\n-export default router\n+  return originalPush.call(this, location).catch((err) => err);\r\n+};\r\n+export default router;\r\n"
                },
                {
                    "date": 1654840289149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,40 +52,8 @@\n       hidden: true,\r\n     },\r\n   },\r\n ];\r\n-\r\n-//  const router = new VueRouter({\r\n-//     routes: [\r\n-//         {\r\n-//             path: \"/\",\r\n-//             name: \"Login\",\r\n-//             redirect: \"/Login\",\r\n-//             meta: {\r\n-//                 title: '表格',\r\n-//                 guard: {\r\n-//                     role: [''],\r\n-//                     mode: '',\r\n-//                 },\r\n-//                 icon: 'table-2',\r\n-//             },\r\n-//         },\r\n-//         {\r\n-//             path: \"/Home\",\r\n-//             name: \"Home\",\r\n-//             component: () => import(\"@/views/Home\"),\r\n-//             children: [\r\n-//             ],\r\n-//         },\r\n-//         {\r\n-//             path: \"/Login\",\r\n-//             name: \"login\",\r\n-//             component: () => import(\"@/views/Login/Login\"),\r\n-//         },\r\n-//\r\n-//     ],\r\n-// });\r\n-\r\n const router = createRouter();\r\n \r\n const whiteList = [\"/Login\"]; // no redirect whitelist\r\n //导航守卫\r\n"
                },
                {
                    "date": 1654840532199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,9 @@\n     },\r\n   },\r\n ];\r\n \r\n+\r\n const router = createRouter();\r\n \r\n const whiteList = [\"/Login\"]; // no redirect whitelist\r\n //导航守卫\r\n"
                },
                {
                    "date": 1654841938973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   },\r\n   {\r\n     path: \"/Index\",\r\n     name: \"Index\",\r\n-    component: () => import(\"@/\"),\r\n+    component: () => import(\"@/v\"),\r\n     meta: {\r\n       hidden: true,\r\n     },\r\n     children: [],\r\n"
                }
            ],
            "date": 1654839699410,
            "name": "Commit-0",
            "content": "import Vue from \"vue\";\r\nimport VueRouter from \"vue-router\";\r\nimport {loginInterception, recordRoute, routerMode} from '@/config/setting.config';\r\nimport store from '@/store'\r\nimport {Message} from 'element-ui'\r\nimport 'nprogress/nprogress.css'\r\nimport {publicPath} from \"../config/cli.config\";\r\nexport const asyncRoutes = []\r\nVue.use(VueRouter);\r\n\r\nexport const constantRoutes = [\r\n        {\r\n            path: \"/\",\r\n            name: \"Login\",\r\n            redirect: \"/Login\",\r\n        },\r\n        {\r\n            path: \"/Home\",\r\n            name: \"Home\",\r\n            component: () => import(\"@/vi\"),\r\n            meta: {\r\n                hidden: true,\r\n            },\r\n            children: []\r\n        },\r\n        {\r\n            path: \"/Login\",\r\n            name: \"login\",\r\n            meta: {\r\n                hidden: true,\r\n            },\r\n            component: () => import(\"@/views/Login/Login\"),\r\n        },\r\n        {\r\n            path: '/403',\r\n            name: '403',\r\n            component: () => import('@/views/403'),\r\n\r\n            meta: {\r\n                hidden: true,\r\n            },\r\n        },\r\n        {\r\n            path: '/404',\r\n            name: '404',\r\n            component: () => import('@/views/404'),\r\n            meta: {\r\n                hidden: true,\r\n            },\r\n        },\r\n]\r\n\r\n//  const router = new VueRouter({\r\n//     routes: [\r\n//         {\r\n//             path: \"/\",\r\n//             name: \"Login\",\r\n//             redirect: \"/Login\",\r\n//             meta: {\r\n//                 title: '表格',\r\n//                 guard: {\r\n//                     role: [''],\r\n//                     mode: '',\r\n//                 },\r\n//                 icon: 'table-2',\r\n//             },\r\n//         },\r\n//         {\r\n//             path: \"/Home\",\r\n//             name: \"Home\",\r\n//             component: () => import(\"@/views/Home\"),\r\n//             children: [\r\n//             ],\r\n//         },\r\n//         {\r\n//             path: \"/Login\",\r\n//             name: \"login\",\r\n//             component: () => import(\"@/views/Login/Login\"),\r\n//         },\r\n//\r\n//     ],\r\n// });\r\n\r\nconst router = createRouter();\r\n\r\nconst whiteList = ['/Login'] // no redirect whitelist\r\n//导航守卫\r\n//使用 router.beforeEach 注册一个全局前置守卫，判断用户是否登陆\r\nrouter.beforeEach(async (to, from, next) => {\r\n    // start progress bar\r\n\r\n    const hasToken = localStorage.getItem(\"token\")\r\n    if (hasToken) {\r\n        if (store.getters['routes/routes'].length) {\r\n            if (to.path === '/Login') {\r\n                // if is logged in, redirect to the home page\r\n                next({path: '/Home'})\r\n                // NProgress.done()\r\n            } else {\r\n                console.log(\"to.path\", to.path)\r\n                console.log(\"accessRoutes111111\", await store.dispatch('routes/setRoutes', 'all'))\r\n                next();\r\n            }\r\n        } else {\r\n            //判断获取来的动态路由的数据是否有数据\r\n            const hasGetUserInfo = store.getters.roles && store.getters.roles.length > 0\r\n            if (hasGetUserInfo) {\r\n                next()\r\n            } else {\r\n                try {\r\n                    // get user info\r\n                    // await store.dispatch('user/getInfo')\r\n                    //调用获取动态的接口\r\n                    // eslint-disable-next-line no-undef\r\n                    if (loginInterception) {\r\n                        console.log(\"data==\",await store.dispatch('user/getUserInfo'))\r\n                        // eslint-disable-next-line no-empty\r\n                    }else{\r\n\r\n                    }\r\n                    // 在这里获取异步路由\r\n                    // eslint-disable-next-line no-undef\r\n                    console.log(\"accessRoutes\", await store.dispatch('routes/setRoutes', 'all'))\r\n                    // 调用router.addRoutes方法,将异步路由添加进去\r\n                     //const {data} =await store.dispatch('routes/setRoutes', 'all')\r\n                     // router.addRoutes(data)\r\n                    // // 在这动态添加最后的通配路由，确保先有动态路由、再有通配路由，解决动态路由刷新会跳转到404问题\r\n                    // let lastRou = [{ path: '*', redirect: '/404' }]\r\n                    //router.addRoutes(lastRou)\r\n                    next()\r\n                } catch (error) {\r\n                    // remove token and go to login page to re-login\r\n                    await store.dispatch('user/resetAll')\r\n                    Message.error(error || 'Has Error')\r\n                    next(toLoginRoute(to.path))\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        /* has no token*/\r\n        if (whiteList.indexOf(to.path) !== -1) {\r\n            // in the free login whitelist, go directly\r\n            next()\r\n        } else {\r\n            // other pages that do not have permission to access are redirected to the login page.\r\n            console.log(\"/login?redirect=\", to.path)\r\n            next({path: '/Login'})\r\n        }\r\n    }\r\n    //\r\n    // if (to.path === '/login') {\r\n    //     next();\r\n    // } else {\r\n    //     let token = localStorage.getItem('token');\r\n    //     if (token === null || token === '') {\r\n    //         next('/login');\r\n    //     } else {\r\n    //         next();\r\n    //     }\r\n    // }\r\n});\r\n\r\n/**\r\n * 获取当前跳转登录页的Route\r\n * @param currentPath 当前页面地址\r\n */\r\nexport function toLoginRoute(currentPath) {\r\n    if (recordRoute && currentPath !== '/')\r\n        return {\r\n            path: '/login',\r\n            query: {redirect: currentPath},\r\n            replace: true,\r\n        }\r\n    else return {path: '/login', replace: true}\r\n}\r\n\r\nexport function resetRouter(routes = constantRoutes) {\r\n    routes.map((route) => {\r\n        if (route.children) {\r\n            route.children = fatteningRoutes(route.children)\r\n        }\r\n    })\r\n    router.matcher = createRouter(routes).matcher\r\n}\r\n\r\nfunction fatteningRoutes(routes) {\r\n    return routes.flatMap((route) => {\r\n        return route.children ? fatteningRoutes(route.children) : route\r\n    })\r\n}\r\n\r\nfunction createRouter(routes = constantRoutes) {\r\n    console.log(\"routes======\",routes)\r\n    const router123=new VueRouter({\r\n        base: publicPath,\r\n        mode: routerMode,\r\n        scrollBehavior: () => ({\r\n            y: 0,\r\n        }),\r\n        routes: routes\r\n    })\r\n    console.log(\"routes123======\",router123)\r\n    return router123\r\n}\r\nconst originalPush = VueRouter.prototype.push\r\nVueRouter.prototype.push = function push(location) {\r\n    return originalPush.call(this, location).catch((err) => err)\r\n}\r\nexport default router"
        }
    ]
}